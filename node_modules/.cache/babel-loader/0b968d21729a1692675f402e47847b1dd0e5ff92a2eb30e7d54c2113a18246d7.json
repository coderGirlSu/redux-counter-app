{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    login(state) {\n      state.isLoggedIn = true;\n    },\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // payload is a special name for the extra data that is passed with the action\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// configureStore combines createStore and combineReducers, so we can have multiple reducers\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","login","state","isLoggedIn","increment","decrement","increase","action","payload","toggle","store","reducer","counterActions","actions"],"sources":["/Users/zhangsu/Udemy/redux-counter-app/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\n\nconst initialState = {\n    counter:0,\n    showCounter:true\n}\n\nconst counterSlice = createSlice({\n    name:'counter',\n    initialState: initialState,\n    reducers: {\n        login(state) {\n         state.isLoggedIn = true;\n        },\n       increment(state) {\n        state.counter++;\n       },\n       decrement(state) {\n        state.counter--;\n       },\n       increase(state, action) {\n        state.counter = state.counter + action.payload; // payload is a special name for the extra data that is passed with the action\n       },\n       toggle(state) {\n        state.showCounter = !state.showCounter;\n       },\n    }\n})\n\n// configureStore combines createStore and combineReducers, so we can have multiple reducers\nconst store = configureStore({\n    reducer: counterSlice.reducer\n});\n\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAC,CAAC;EACTC,WAAW,EAAC;AAChB,CAAC;AAED,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAC,SAAS;EACdJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACNC,KAAKA,CAACC,KAAK,EAAE;MACZA,KAAK,CAACC,UAAU,GAAG,IAAI;IACxB,CAAC;IACFC,SAASA,CAACF,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IAChB,CAAC;IACDS,SAASA,CAACH,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IAChB,CAAC;IACDU,QAAQA,CAACJ,KAAK,EAAEK,MAAM,EAAE;MACvBL,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGW,MAAM,CAACC,OAAO,CAAC,CAAC;IACjD,CAAC;IACDC,MAAMA,CAACP,KAAK,EAAE;MACbA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACvC;EACH;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMa,KAAK,GAAGhB,cAAc,CAAC;EACzBiB,OAAO,EAAEb,YAAY,CAACa;AAC1B,CAAC,CAAC;AAGF,OAAO,MAAMC,cAAc,GAAGd,YAAY,CAACe,OAAO;AAClD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}