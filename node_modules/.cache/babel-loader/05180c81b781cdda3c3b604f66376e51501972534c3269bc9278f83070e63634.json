{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter // set the opposite of the current state\n//         }\n//     }\n//     return state;\n// }\n\n// configureStore combines createStore and combineReducers, so we can have multiple reducers\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggle","store","reducer"],"sources":["/Users/zhangsu/Udemy/redux-counter-app/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\n\nconst initialState = {\n    counter:0,\n    showCounter:true\n}\n\nconst counterSlice = createSlice({\n    name:'counter',\n    initialState: initialState,\n    reducers: {\n       increment(state) {\n        state.counter++;\n       },\n       decrement(state) {\n        state.counter--;\n       },\n       increase(state, action) {\n        state.counter = state.counter + action.amount;\n       },\n       toggle(state) {\n        state.showCounter = !state.showCounter;\n       },\n    }\n})\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n//     if(action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter // set the opposite of the current state\n//         }\n//     }\n//     return state;\n// }\n\n// configureStore combines createStore and combineReducers, so we can have multiple reducers\nconst store = configureStore({\n    reducer: counterSlice.reducer\n});\n\nexport default store;\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAC,CAAC;EACTC,WAAW,EAAC;AAChB,CAAC;AAED,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAC,SAAS;EACdJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACPC,SAASA,CAACC,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IAChB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MAChBA,KAAK,CAACN,OAAO,EAAE;IAChB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACvBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC9C,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACbA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACvC;EACH;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMW,KAAK,GAAGd,cAAc,CAAC;EACzBe,OAAO,EAAEX,YAAY,CAACW;AAC1B,CAAC,CAAC;AAEF,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}